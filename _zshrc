init_env() {
  export EDITOR=vim
  export ARCHFLAGS="-arch x86_64"
  export R_HOME=/usr/local/Cellar/r/3.1.3/R.framework/Resources

  echo "Hi Dan, your code sucks. -Graham"
}

init_history() {
  HISTFILE=$HOME/.zhistory       # enable history saving on shell exit
  setopt INC_APPEND_HISTORY          # append rather than overwrite history file.
  HISTSIZE=10000                 # lines of history to maintain memory
  SAVEHIST=100000                # lines of history to maintain in history file.
  setopt HIST_EXPIRE_DUPS_FIRST  # allow dups, but expire old ones when I hit HISTSIZE
  setopt EXTENDED_HISTORY        # save timestamp and runtime information
}

init_aliases() {
  alias e='emacs -nw' # editor
  alias ll='ls -l'
  alias gcm='git checkout master'
  alias clj='java -cp "$HOME/opt/clojure-1.8.0/clojure-1.8.0.jar" clojure.main'
  alias clojure=clj
  alias jack='ack --ignore-dir=_site --ignore-dir=_sass/vendor --ignore-dir=.sass-cache' # ack for jekyll projects

  #unalias sl
}

init_keybindings() {
  # Make C-w go until back to the last space
  tcsh-backward-kill-word () {
    local WORDCHARS='*?_-.[]~=/&;!#$%^(){}<>'
    zle backward-kill-word
  }
  zle -N tcsh-backward-kill-word
  bindkey -e # emacs keybindings
  bindkey '^W' tcsh-backward-kill-word
}

init_packages() {
  export ZSH=$HOME/.oh-my-zsh
  export ZSH_THEME_GIT_PROMPT_NOCACHE=t
  plugins=(git gnu-utils)
  source $ZSH/oh-my-zsh.sh
  source ~/.zsh/git-prompt/zsh-git-prompt.sh # https://github.com/olivierverdier/zsh-git-prompt
  unsetopt correctall


  source ~/.zsh/functional/functional.plugin.zsh
}

init_path() {
  pathdirs=(
    $HOME/bin 
    $HOME/opt/bin 
#    /usr/local/opt/coreutils//libexec/gnubin/
    /usr/lib/lightdm/lightdm 
    /usr/local/sbin 
    /usr/local/heroku/bin 
    /usr/local/bin 
    /usr/sbin 
    /usr/bin 
    /sbin 
    /bin 
    /usr/games 
    /mono64/bin
################
    $PATH 
################
    $HOME/.rvm/bin 
  )
  export PATH=${(j.:.)pathdirs} 
}

init_prompt() {
  #load colors
  autoload colors && colors
  for COLOR in RED GREEN YELLOW BLUE MAGENTA CYAN BLACK WHITE GREY; do
      eval $COLOR='%{$fg_no_bold[${(L)COLOR}]%}'  #wrap colours between %{ %} to avoid weird gaps in autocomplete
      eval BOLD_$COLOR='%{$fg_bold[${(L)COLOR}]%}'
  done
  eval RESET='%{$reset_color%}'


  export ZSH_THEME_GIT_PROMPT_PREFIX='(' # remove 'git:('
  export ZSH_THEME_GIT_PROMPT_CHANGED="%{$fg_bold[blue]%}+"
  export ZSH_THEME_GIT_PROMPT_CLEAN="%{$fg_bold[green]%}âœ”"
  #PROMPT="%{`echo "\a"`%}[%D{%H:%M:%S}] %n@%m:%~%# "
  #PROMPT="%{`echo "\a"`%}" # bell at prompt to light up xmobar on command completion
  PROMPT='$(git_super_status) %B%~%b %# ' # git status
}

preexec() {
  export CMD_START_TIME=`date +'%s'`
}

precmd() {
  declare CMD_END_TIME=`date +'%s'`
  declare CMD_TIME_SEC=$(( $CMD_END_TIME - ${CMD_START_TIME:-CMD_END_TIME} ))
  declare -Z2 CMD_TIME_SECONDS_PART=$(($CMD_TIME_SEC%60))
  declare -Z2 CMD_TIME_MINUTES_PART=$(($CMD_TIME_SEC/60))
  export CMD_TIME_STR="$CMD_TIME_MINUTES_PART:$CMD_TIME_SECONDS_PART" 
  CMD_START_TIME=`date +'%s'`

  if [ $CMD_TIME_SEC -gt 3 ]; then
    RPROMPT="%(?,%F{green}:%),%F{yellow}%? %F{red}:()%f \$CMD_TIME_STR"
  else
    unset RPROMPT
  fi
}

init_history
init_env
init_packages
init_path
init_prompt
init_aliases
init_keybindings

test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"
